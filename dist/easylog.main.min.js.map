{"version":3,"sources":["webpack://easylog/webpack/bootstrap","webpack://easylog/./src/easylog.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ColorString","allowColor","this","str","cStr","appendColor","termColors","reset","bright","dim","underscore","blink","reverse","bg","bgBlack","fgBlack","bgRed","fgRed","bgGreen","fgGreen","bgYellow","fgYellow","bgBlue","fgBlue","bgMagenta","fgMagenta","bgCyan","fgCyan","bgWhite","fgWhite","hidden","EasyLogStream","options","levels","output","color","_dateFormatter","dateFormatter","messageFormatter","level","EasyLog","LEVEL_INFO","white","LEVEL_WARNING","yellow","LEVEL_ERROR","red","LEVEL_CRITICAL","LEVEL_FATAL","time","toUTCString","message","Date","defaultFormatter","clear","colorPicker","append","EasyLogConsoleStream","super","write","console","log","warn","error","minLevel","stream","streams","push","isMinLevel","LEVEL_DEBUG"],"mappings":"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","file":"easylog.main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @class ColorString A basic class that enables color formatted output to\n * the command line\n */\nclass ColorString {\n    /**\n     * @constructor\n     * @param {Bool} allowColor Enables color mode\n     */\n    constructor(allowColor=true) {\n        this.str = '';\n        this.allowColor = allowColor;\n    }\n\n    /**\n     * Appends a value to the current output buffer\n     * @param {String} str The string\n     * @return {ColorString}\n     */\n    append(str) {\n        this.str += str;\n        return this;\n    }\n\n    /**\n     * Appends a color to the current string\n     * @param {String} cStr The color string\n     * @return {ColorString}\n     */\n    appendColor(cStr) {\n        if (this.allowColor) {\n            this.str += cStr;\n        }\n    }\n\n    /**\n     * Resets terminal to default\n     * @return {ColorString}\n     */\n    reset() {\n        this.appendColor(ColorString.termColors.reset);\n        return this;\n    }\n\n    /**\n     * Sets font to bright mode\n     * @return {ColorString}\n     */\n    bright() {\n        this.appendColor(ColorString.termColors.bright);\n        return this;\n    }\n\n    /**\n     * Sets font to dim mode\n     * @return {ColorString}\n     */\n    dim() {\n        this.appendColor(ColorString.termColors.dim);\n        return this;\n    }\n\n    /**\n     * Sets font to underscore mode\n     * @return {ColorString}\n     */\n    underscore() {\n        this.appendColor(ColorString.termColors.underscore);\n        return this;\n    }\n\n    /**\n     * Sets font to blink mode\n     * @return {ColorString}\n     */\n    blink() {\n        this.appendColor(ColorString.termColors.blink);\n        return this;\n    }\n\n    /**\n     * Reverses foreground and background colors\n     * @return {ColorString}\n     */\n    reverse() {\n        this.appendColor(ColorString.termColors.reverse);\n        return this;\n    }\n\n    /**\n     * Enables hidden mode\n     * @return {ColorString}\n     */\n    hidden() {\n        this.appendColor(ColorString.termColors.reverse);\n        return this;\n    }\n\n    /**\n     * Sets color to black\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    black(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgBlack : ColorString.termColors.fgBlack);\n        return this;\n    }\n\n    /**\n     * Sets color to red\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    red(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgRed : ColorString.termColors.fgRed);\n        return this;\n    }\n\n\n    /**\n     * Sets color to green\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    green(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgGreen : ColorString.termColors.fgGreen);\n        return this;\n    }\n\n\n    /**\n     * Sets color to yellow\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    yellow(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgYellow : ColorString.termColors.fgYellow);\n        return this;\n    }\n\n\n    /**\n     * Sets color to blue\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    blue(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgBlue : ColorString.termColors.fgBlue);\n        return this;\n    }\n\n\n    /**\n     * Sets color to magenta\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    magenta(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgMagenta : ColorString.termColors.fgMagenta);\n        return this;\n    }\n\n\n    /**\n     * Sets color to cyan\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    cyan(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgCyan : ColorString.termColors.fgCyan);\n        return this;\n    }\n\n    /**\n     * Sets color to white\n     * @param {Bool} bg Background color (default false)\n     * @return {ColorString}\n     */\n    white(bg=false) {\n        this.appendColor(bg ? ColorString.termColors.bgWhite : ColorString.termColors.fgWhite);\n        return this;\n    }\n\n    toString() {\n        return this.str;\n    }\n\n\n    /**\n     * Clears the current string buffer\n     * @returns {ColorString}\n     */\n    clear() {\n        this.str = '';\n        return this;\n    }\n}\nColorString.termColors = {\n    reset: '\\x1b[0m',\n    bright: '\\x1b[1m',\n    dim: '\\x1b[2m',\n    underscore: '\\x1b[4m',\n    blink: '\\x1b[5m',\n    reverse: '\\x1b[7m',\n    hidden: '\\x1b[8m',\n\n    fgBlack: '\\x1b[30m',\n    fgRed: '\\x1b[31m',\n    fgGreen: '\\x1b[32m',\n    fgYellow: '\\x1b[33m',\n    fgBlue: '\\x1b[34m',\n    fgMagenta: '\\x1b[35m',\n    fgCyan: '\\x1b[36m',\n    fgWhite: '\\x1b[37m',\n\n    bgBlack: '\\x1b[40m',\n    bgRed: '\\x1b[41m',\n    bgGreen: '\\x1b[42m',\n    bgYellow: '\\x1b[43m',\n    bgBlue: '\\x1b[44m',\n    bgMagenta: '\\x1b[45m',\n    bgCyan: '\\x1b[46m',\n    bgWhite: '\\x1b[47m',\n};\n\n\n/**\n * @callback StreamDateFormatter\n * @param {Date} time The current time\n * @param {EasyLogStream} stream The calling stream\n * @return {String} The formatted date string\n */\n\n/**\n * @callback StreamMessageFormatter\n * @param {Number} level The log level\n * @param {String} name The origin of the log\n * @param {String} message The actual log message\n * @param {Date} time Time (defaults to current time)\n * @param {EasyLogStream} stream The calling stream\n * @return {String} The formatted message\n */\n\n/**\n * @typedef {Object} StreamOptions\n * @property {Array} levels The log level names\n * @property {Bool} color Enable Colors. Defaults to true\n * @property {StreamDateFormatter} dateFormatter Custom date formatter. By default it will return .toUTCString\n * @property {StreamMessageFormatter} messageFormatter Custom message formatter.\n */\n\n\n\n/**\n * @class EasyLogStream\n * Base class for streams.\n * Use it as a base to create your own logger output stream.\n */\nclass EasyLogStream {\n    /**\n     * @constructor\n     * @param {StreamOptions} options The options object.\n     */\n    constructor(options={}) {\n        this.levels = options.levels || ['debug', 'info', 'warning', 'error', 'critical', 'fatal'];\n        this.output = '';\n        this.color = new ColorString(options.color);\n        this._dateFormatter = options.dateFormatter;\n        this.messageFormatter = options.messageFormatter;\n    }\n\n    /**\n     * Picks the color for the given log leven. Override for custom (or no) colors\n     * @param {Number} level The loglevel\n     */\n    colorPicker(level) {\n        // choose color\n        switch (level) {\n            case EasyLog.LEVEL_INFO:\n                this.color.white();\n                break;\n            case EasyLog.LEVEL_WARNING:\n                this.color.yellow();\n                break;\n            case EasyLog.LEVEL_ERROR:\n                this.color.red(false);\n                break;\n            case EasyLog.LEVEL_CRITICAL:\n                this.color.red(true);\n                break;\n            case EasyLog.LEVEL_FATAL:\n                this.color.red(true);\n                this.color.bright();\n                break;\n        }\n    }\n\n    /**\n     * Formats the date string. Override for custom formatting.\n     * @param {Date} time The current time\n     */\n    dateFormatter(time) {\n        /**\n         * If time formatter exists do not call default\n         */\n        if (this._dateFormatter) {\n            return this._dateFormatter(time, this);\n        }\n        return time.toUTCString();\n    }\n\n    /**\n     * writes the logged message. Calls messageFormatter is defined\n     * @param {Number} level The log level\n     * @param {String} name The origin of the log\n     * @param {String} message The actual log message\n     * @param {Date} time Time (defaults to current time)\n     * @return {String} The output\n     */\n    write(level, name, message, time=new Date()) {\n        /**\n         * If message formatter exists do not invoke default behaviour\n         */\n        if (this.messageFormatter) {\n            this.output = this.messageFormatter(level, name, message, time, this);\n            return this.output;\n        }\n        return this.defaultFormatter(level, name, message, time);\n    }\n\n    /**\n     * The default message formatter.\n     * @param {Number} level The log level\n     * @param {String} name The origin of the log\n     * @param {String} message The actual log message\n     * @param {Date} time Time (defaults to current time)\n     * @return {String} The output\n     */\n    defaultFormatter(level, name, message, time) {\n        this.color.clear();\n        this.color.reset();\n\n        this.colorPicker(level);\n\n        this.color.append(`${this.dateFormatter(time)} [${this.levels[level]}] [${name}] ${message}`);\n        this.color.reset();\n\n        this.output = this.color.str;\n\n        return this.output;\n    }\n}\n\n/**\n * @class EasyLogConsoleStream Console output logger\n */\nclass EasyLogConsoleStream extends EasyLogStream {\n    /**\n     * @constructor\n     * @param {StreamOptions} options The options object.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * writes the logged message. Override to log to custom destination\n     * @param {Number} level The log level\n     * @param {String} name The origin of the log\n     * @param {String} message The actual log message\n     * @param {Date} time Time (defaults to current time)\n     * @return {String} The output\n     */\n    write(level, name, message, time=new Date()) {\n        super.write(level, name, message, time);\n        if (level < EasyLog.LEVEL_WARNING) {\n            console.log(this.output);\n        } else if (level < EasyLog.LEVEL_ERROR) {\n            console.warn(this.output);\n        } else {\n            console.error(this.output);\n        }\n\n        return this.output;\n    }\n}\n\n/**\n * @class EasyLog Logger class\n */\nclass EasyLog {\n    /**\n     * @constructor\n     * @param {string} name The name of the logger\n     * @param {Number} minLevel The current log level\n     * @param {EasyLogStream} stream The output stream for the logger. Must be a subclass of EasyLogStreamBase\n     */\n    constructor(name, minLevel=EasyLog.LEVEL_ERROR, stream=new EasyLogConsoleStream()) {\n        this.name = name;\n        this.minLevel = minLevel;\n        this.streams = [stream];\n    }\n\n    /**\n     * Add a new stream to this logger\n     * @param {Object} stream The stream\n     */\n    addStream(stream) {\n        this.streams.push(stream);\n    }\n\n    /**\n     * @param {Number} level\n     * @return {Bool} true if level is above or equal to the current log level\n     */\n    isMinLevel(level) {\n        return level >= this.minLevel;\n    }\n\n\n    /**\n     * Outputs the current message to log if the level is ok\n     * @param {Number} level The log level\n     * @param {String} message The message to output\n     */\n    output(level, message) {\n        if (!this.isMinLevel(level)) {\n            return;\n        }\n        for (let stream of this.streams) {\n            stream.write(level, this.name, message);\n        }\n    }\n\n    /**\n     * Outputs info log level\n     * @param {String} message The message\n     * @return {EasyLog}\n     */\n    info(message) {\n        this. output(EasyLog.LEVEL_INFO, message);\n        return this;\n    }\n\n    /**\n     * Outputs warning log level\n     * @param {String} message The message\n     * @return {EasyLog}\n     */\n    warning(message) {\n        this.output(EasyLog.LEVEL_WARNING, message);\n        return this;\n    }\n\n\n    /**\n     * Outputs error log level\n     * @param {String} message The message\n     * @return {EasyLog}\n     */\n    error(message) {\n        this.output(EasyLog.LEVEL_ERROR, message);\n        return this;\n    }\n\n    /**\n     * Outputs ciritcal log level\n     * @param {String} message The message\n     * @return {EasyLog}\n     */\n    crit(message) {\n        this.output(EasyLog.LEVEL_CRITICAL, message);\n        return this;\n    }\n\n    /**\n     * Outputs fatal log level\n     * @param {String} message The message\n     * @return {EasyLog}\n     */\n    fatal(message) {\n        this.output(EasyLog.LEVEL_FATAL, message);\n        return this;\n    }\n\n\n    /**\n     * Outputs debug log level\n     * @param {String} message The message\n     * @return {EasyLog}\n     */\n    debug(message) {\n        this.output(EasyLog.LEVEL_DEBUG, message);\n        return this;\n    }\n}\n/**\n * {Number} LEVEL_DEBUG Debug log level\n */\nEasyLog.LEVEL_DEBUG = 0;\n/**\n * {Number} LEVEL_INFO Info log level\n */\nEasyLog.LEVEL_INFO = 1;\n/**\n * {Number} LEVEL_WARNING Warning log level\n */\nEasyLog.LEVEL_WARNING = 2;\n/**\n * {Number} LEVEL_ERROR Error log level\n */\nEasyLog.LEVEL_ERROR = 3;\n/**\n * {Number} LEVEL_CRITICAL Ciritcal log level\n */\nEasyLog.LEVEL_CRITICAL = 4;\n/**\n * {Number} LEVEL_FATAL Fatal log level\n */\nEasyLog.LEVEL_FATAL = 5;\n\nmodule.exports = {ColorString, EasyLog, EasyLogConsoleStream, EasyLogStream};\n"],"sourceRoot":""}